{
  "address": "0x778364bCDC9d05e1b4351cDceAF2Dd40EFa32f82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "listingAttester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "listingConnectionAttester",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "Listings__BuyerAlreadyConnected",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "Listings__InvalidSeller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "Listings__NotExistedListingId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "Listings__SellerCannotSelfConnected",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "AddListing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "CreateListingConnection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "DeleteListing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "UpdateListing",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_listingAttester",
      "outputs": [
        {
          "internalType": "contract ListingAttester",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_listingConnectionAttester",
      "outputs": [
        {
          "internalType": "contract ListingConnectionAttester",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "beds",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        }
      ],
      "name": "addListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "connectedBuyers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "createListingConnection",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "attestationUID",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "deleteListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "existingIds",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllListingConnections",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "listingId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "attestationUID",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Listings.ListingConnection[]",
          "name": "allListingConnections",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllListings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "attestationUID",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "beds",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            }
          ],
          "internalType": "struct Listings.Listing[]",
          "name": "allListings",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listingConnections",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "attestationUID",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "attestationUID",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "beds",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "beds",
          "type": "uint256"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4f20eb97b8d8346e3b0fae07af85417e1e7ddeed5f5aa16d69d440ba050462d",
  "receipt": {
    "to": null,
    "from": "0xe84680C37f320c56d9F26E549155D33Bd412e7E3",
    "contractAddress": "0x778364bCDC9d05e1b4351cDceAF2Dd40EFa32f82",
    "transactionIndex": 10,
    "gasUsed": "1692135",
    "logsBloom": "0x
    "blockHash": "0xb165c56b812b48a38c3b5077b6e10cbaa8521986bcea16b04cf584ba50c28518",
    "transactionHash": "0xb4f20eb97b8d8346e3b0fae07af85417e1e7ddeed5f5aa16d69d440ba050462d",
    "logs": [],
    "blockNumber": 13726639,
    "cumulativeGasUsed": "2458934",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7Aa6333cC03e56819D44A0a112bA4C8bC1419e59",
    "0x3c0fc15918c7a1236a484A23cab8D10F65EB8dfE"
  ],
  "numDeployments": 2,
  "solcInputHash": "0e9667f569f282eb2b1af57df7cb52c7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listingAttester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listingConnectionAttester\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"Listings__BuyerAlreadyConnected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Listings__InvalidSeller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"Listings__NotExistedListingId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"Listings__SellerCannotSelfConnected\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"AddListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"CreateListingConnection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"DeleteListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"UpdateListing\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_listingAttester\",\"outputs\":[{\"internalType\":\"contract ListingAttester\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_listingConnectionAttester\",\"outputs\":[{\"internalType\":\"contract ListingConnectionAttester\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beds\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"addListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"connectedBuyers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"createListingConnection\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationUID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"deleteListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"existingIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllListingConnections\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"attestationUID\",\"type\":\"bytes32\"}],\"internalType\":\"struct Listings.ListingConnection[]\",\"name\":\"allListingConnections\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllListings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"attestationUID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beds\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"internalType\":\"struct Listings.Listing[]\",\"name\":\"allListings\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listingConnections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"attestationUID\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"attestationUID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beds\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beds\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Listings.sol\":\"Listings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS is ISemver {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID of the new attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry is ISemver {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"../ISemver.sol\\\";\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver is ISemver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x479f39f03425df5385d790cd2c7447b8250aeb9733d13029d3da8c5982b6604b\",\"license\":\"MIT\"},\"contracts/ListingAttester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport { IEAS, AttestationRequest, AttestationRequestData } from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\r\\nimport { NO_EXPIRATION_TIME, EMPTY_UID } from \\\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\\\";\\r\\n\\r\\ncontract ListingAttester {\\r\\n\\tIEAS public immutable _eas;\\r\\n\\tbytes32 public immutable _listingSchemaUID;\\r\\n\\r\\n\\terror InvalidEAS();\\r\\n\\r\\n\\tconstructor(IEAS eas, bytes32 listingSchemaUID) {\\r\\n\\t\\tif (address(eas) == address(0)) {\\r\\n\\t\\t\\trevert InvalidEAS();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t_eas = eas;\\r\\n\\t\\t_listingSchemaUID = listingSchemaUID;\\r\\n\\t}\\r\\n\\r\\n\\tfunction attestListing(\\r\\n\\t\\tuint256 listingId,\\r\\n\\t\\tstring memory listingName,\\r\\n\\t\\taddress seller\\r\\n\\t) external returns (bytes32 attestationUID) {\\r\\n\\t\\treturn\\r\\n\\t\\t\\t_eas.attest(\\r\\n\\t\\t\\t\\tAttestationRequest({\\r\\n\\t\\t\\t\\t\\tschema: _listingSchemaUID,\\r\\n\\t\\t\\t\\t\\tdata: AttestationRequestData({\\r\\n\\t\\t\\t\\t\\t\\trecipient: seller,\\r\\n\\t\\t\\t\\t\\t\\texpirationTime: NO_EXPIRATION_TIME, // No expiration time\\r\\n\\t\\t\\t\\t\\t\\trevocable: true,\\r\\n\\t\\t\\t\\t\\t\\trefUID: EMPTY_UID, // No references UI\\r\\n\\t\\t\\t\\t\\t\\tdata: abi.encode(listingId, listingName, seller),\\r\\n\\t\\t\\t\\t\\t\\tvalue: 0 // No value/ETH\\r\\n\\t\\t\\t\\t\\t})\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t);\\r\\n\\t\\t// return\\r\\n\\t\\t// \\t0x0d455486a3dadeacfba5f340fe5bf84d1f6678b2e2af53536acc8a4274626f82;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x52221a868a714b9c698e9ad66a659fb7aa141bd34e896c5dbf1ce9460e788ef6\",\"license\":\"MIT\"},\"contracts/ListingConnectionAttester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport { IEAS, AttestationRequest, AttestationRequestData } from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\r\\nimport { NO_EXPIRATION_TIME, EMPTY_UID } from \\\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\\\";\\r\\n\\r\\ncontract ListingConnectionAttester {\\r\\n\\tIEAS public immutable _eas;\\r\\n\\tbytes32 public immutable _listingConnectionSchemaUID;\\r\\n\\r\\n\\terror InvalidEAS();\\r\\n\\r\\n\\tconstructor(IEAS eas, bytes32 listingConnectionSchemaUID) {\\r\\n\\t\\tif (address(eas) == address(0)) {\\r\\n\\t\\t\\trevert InvalidEAS();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t_eas = eas;\\r\\n\\t\\t_listingConnectionSchemaUID = listingConnectionSchemaUID;\\r\\n\\t}\\r\\n\\r\\n\\tfunction attestListingConnection(\\r\\n\\t\\tuint256 listingId,\\r\\n\\t\\taddress seller,\\r\\n\\t\\taddress buyer\\r\\n\\t) external returns (bytes32 attestationUID) {\\r\\n\\t\\treturn\\r\\n\\t\\t\\t_eas.attest(\\r\\n\\t\\t\\t\\tAttestationRequest({\\r\\n\\t\\t\\t\\t\\tschema: _listingConnectionSchemaUID,\\r\\n\\t\\t\\t\\t\\tdata: AttestationRequestData({\\r\\n\\t\\t\\t\\t\\t\\trecipient: buyer,\\r\\n\\t\\t\\t\\t\\t\\texpirationTime: NO_EXPIRATION_TIME, // No expiration time\\r\\n\\t\\t\\t\\t\\t\\trevocable: true,\\r\\n\\t\\t\\t\\t\\t\\trefUID: EMPTY_UID, // No references UI\\r\\n\\t\\t\\t\\t\\t\\tdata: abi.encode(listingId, seller, buyer),\\r\\n\\t\\t\\t\\t\\t\\tvalue: 0 // No value/ETH\\r\\n\\t\\t\\t\\t\\t})\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t);\\r\\n\\t\\t// return\\r\\n\\t\\t// \\t0x0d455486a3dadeacfba5f340fe5bf84d1f6678b2e2af53536acc8a4274626f82;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x484c10023102a00bf98f43d926649d7b1b71d8724c3f9a268026caba045d06b8\",\"license\":\"MIT\"},\"contracts/Listings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"./ListingAttester.sol\\\";\\r\\nimport \\\"./ListingConnectionAttester.sol\\\";\\r\\n\\r\\ncontract Listings {\\r\\n\\tstruct Listing {\\r\\n\\t\\tuint256 id;\\r\\n\\t\\tstring name;\\r\\n\\t\\taddress seller;\\r\\n\\t\\tbytes32 attestationUID;\\r\\n\\t\\tstring location;\\r\\n\\t\\tstring description;\\r\\n\\t\\tuint256 price;\\r\\n\\t\\tuint256 beds;\\r\\n\\t\\tstring cid;\\r\\n\\t}\\r\\n\\r\\n\\tstruct ListingConnection {\\r\\n\\t\\tuint256 listingId;\\r\\n\\t\\taddress seller;\\r\\n\\t\\taddress buyer;\\r\\n\\t\\tbytes32 attestationUID;\\r\\n\\t}\\r\\n\\r\\n\\tuint256 private currentId;\\r\\n\\r\\n\\tmapping(uint256 => bool) public existingIds;\\r\\n\\tListing[] public listings;\\r\\n\\tmapping(uint256 => uint256) public idToIndex;\\r\\n\\tListingAttester public immutable _listingAttester;\\r\\n\\r\\n\\tmapping(uint256 => mapping(address => bool)) public connectedBuyers;\\r\\n\\tListingConnectionAttester public immutable _listingConnectionAttester;\\r\\n\\tListingConnection[] public listingConnections;\\r\\n\\r\\n\\tevent AddListing(address indexed seller, uint256 listingId);\\r\\n\\tevent UpdateListing(\\r\\n\\t\\taddress indexed seller,\\r\\n\\t\\tuint256 listingId,\\r\\n\\t\\tstring newName\\r\\n\\t);\\r\\n\\tevent DeleteListing(address indexed seller, uint256 listingId);\\r\\n\\tevent CreateListingConnection(address indexed buyer, uint256 listingId);\\r\\n\\r\\n\\terror Listings__NotExistedListingId(uint256 listingId);\\r\\n\\terror Listings__InvalidSeller(address seller);\\r\\n\\terror Listings__SellerCannotSelfConnected(address buyer, uint256 listingId);\\r\\n\\terror Listings__BuyerAlreadyConnected(address buyer, uint256 listingId);\\r\\n\\r\\n\\tmodifier checkExistedListingId(uint256 id) {\\r\\n\\t\\tif (!existingIds[id]) {\\r\\n\\t\\t\\trevert Listings__NotExistedListingId(id);\\r\\n\\t\\t}\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier isSeller(uint256 id) {\\r\\n\\t\\tuint256 index = idToIndex[id];\\r\\n\\t\\tif (msg.sender != listings[index].seller) {\\r\\n\\t\\t\\trevert Listings__InvalidSeller(msg.sender);\\r\\n\\t\\t}\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tconstructor(address listingAttester, address listingConnectionAttester) {\\r\\n\\t\\t_listingAttester = ListingAttester(listingAttester);\\r\\n\\t\\t_listingConnectionAttester = ListingConnectionAttester(\\r\\n\\t\\t\\tlistingConnectionAttester\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction addListing(\\r\\n\\t\\tstring calldata name,\\r\\n\\t\\tstring calldata location,\\r\\n\\t\\tstring calldata description,\\r\\n\\t\\tuint256 price,\\r\\n\\t\\tuint256 beds,\\r\\n\\t\\tstring calldata cid\\r\\n\\t) public {\\r\\n\\t\\tbytes32 attestationUID = _listingAttester.attestListing(\\r\\n\\t\\t\\tcurrentId,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tmsg.sender\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tListing memory listing = Listing(\\r\\n\\t\\t\\tcurrentId,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\tattestationUID,\\r\\n\\t\\t\\tlocation,\\r\\n\\t\\t\\tdescription,\\r\\n\\t\\t\\tprice,\\r\\n\\t\\t\\tbeds,\\r\\n\\t\\t\\tcid\\r\\n\\t\\t);\\r\\n\\t\\tlistings.push(listing);\\r\\n\\r\\n\\t\\texistingIds[currentId] = true;\\r\\n\\t\\tidToIndex[listing.id] = currentId;\\r\\n\\t\\tcurrentId++;\\r\\n\\r\\n\\t\\temit AddListing(msg.sender, listing.id);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateListing(\\r\\n\\t\\tuint256 id,\\r\\n\\t\\tstring calldata name,\\r\\n\\t\\tstring calldata location,\\r\\n\\t\\tstring calldata description,\\r\\n\\t\\tuint256 price,\\r\\n\\t\\tuint256 beds\\r\\n\\t) public checkExistedListingId(id) isSeller(id) {\\r\\n\\t\\tuint256 index = idToIndex[id];\\r\\n\\r\\n\\t\\t// Only update fields that are not empty or zero\\r\\n\\t\\tif (bytes(name).length > 0) {\\r\\n\\t\\t\\tlistings[index].name = name;\\r\\n\\t\\t}\\r\\n\\t\\tif (bytes(location).length > 0) {\\r\\n\\t\\t\\tlistings[index].location = location;\\r\\n\\t\\t}\\r\\n\\t\\tif (bytes(description).length > 0) {\\r\\n\\t\\t\\tlistings[index].description = description;\\r\\n\\t\\t}\\r\\n\\t\\tif (price > 0) {\\r\\n\\t\\t\\tlistings[index].price = price;\\r\\n\\t\\t}\\r\\n\\t\\tif (beds > 0) {\\r\\n\\t\\t\\tlistings[index].beds = beds;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit UpdateListing(msg.sender, id, name);\\r\\n\\t}\\r\\n\\r\\n\\tfunction deleteListing(\\r\\n\\t\\tuint256 id\\r\\n\\t) public checkExistedListingId(id) isSeller(id) {\\r\\n\\t\\tuint256 index = idToIndex[id];\\r\\n\\r\\n\\t\\tfor (uint256 i = index; i < listings.length - 1; i++) {\\r\\n\\t\\t\\tlistings[i] = listings[i + 1];\\r\\n\\t\\t\\tidToIndex[listings[i].id] = i;\\r\\n\\t\\t}\\r\\n\\t\\tlistings.pop();\\r\\n\\r\\n\\t\\tdelete existingIds[id];\\r\\n\\t\\tdelete idToIndex[id];\\r\\n\\r\\n\\t\\temit DeleteListing(msg.sender, id);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAllListings()\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns (Listing[] memory allListings)\\r\\n\\t{\\r\\n\\t\\treturn listings;\\r\\n\\t}\\r\\n\\r\\n\\tfunction createListingConnection(\\r\\n\\t\\tuint256 listingId\\r\\n\\t) public checkExistedListingId(listingId) returns (bytes32 attestationUID) {\\r\\n\\t\\tif (msg.sender == listings[idToIndex[listingId]].seller) {\\r\\n\\t\\t\\trevert Listings__SellerCannotSelfConnected(msg.sender, listingId);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (connectedBuyers[listingId][msg.sender]) {\\r\\n\\t\\t\\trevert Listings__BuyerAlreadyConnected(msg.sender, listingId);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tconnectedBuyers[listingId][msg.sender] = true;\\r\\n\\t\\tattestationUID = _listingConnectionAttester.attestListingConnection(\\r\\n\\t\\t\\tlistingId,\\r\\n\\t\\t\\tlistings[idToIndex[listingId]].seller,\\r\\n\\t\\t\\tmsg.sender\\r\\n\\t\\t);\\r\\n\\t\\tListingConnection memory listingConnection = ListingConnection(\\r\\n\\t\\t\\tcurrentId,\\r\\n\\t\\t\\tlistings[idToIndex[listingId]].seller,\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\tattestationUID\\r\\n\\t\\t);\\r\\n\\t\\tlistingConnections.push(listingConnection);\\r\\n\\r\\n\\t\\temit CreateListingConnection(msg.sender, listingId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAllListingConnections()\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns (ListingConnection[] memory allListingConnections)\\r\\n\\t{\\r\\n\\t\\treturn listingConnections;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xe20a8bcf27dfc7d0fc32614056107a9acacf3f2219a8580cfff2964bc63eb8f2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80639987224f1161008c578063ae73ccec11610066578063ae73ccec14610250578063c9793e4d14610265578063de74e57b1461027a578063e6282c6e146102a257600080fd5b80639987224f146101d7578063a7613c0014610216578063ac8c50511461023d57600080fd5b806308367317146100d45780631f16f82a146101205780633df6db72146101355780636975772a1461016357806377098519146101a157806386df3b81146101c4575b600080fd5b6100e76100e23660046114dc565b6102b5565b60405161011794939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390f35b61013361012e36600461153e565b6102fb565b005b6101556101433660046114dc565b60036020526000908152604090205481565b604051908152602001610117565b610191610171366004611618565b600460209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610117565b6101916101af3660046114dc565b60016020526000908152604090205460ff1681565b6101336101d2366004611654565b610630565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610117565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b61015561024b3660046114dc565b610842565b610258610bac565b6040516101179190611750565b61026d610e93565b6040516101179190611855565b61028d6102883660046114dc565b610f17565b604051610117999897969594939291906118c5565b6101336102b03660046114dc565b61119f565b600581815481106102c557600080fd5b600091825260209091206004909102018054600182015460028301546003909301549193506001600160a01b0390811692169084565b60008054604051634766aa7160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691634766aa719161035091908f908f903390600401611977565b6020604051808303816000875af115801561036f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039391906119aa565b9050600060405180610120016040528060005481526020018d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252503360208083019190915260408083018690528051601f8e018390048302810183019091528c8152606090920191908d908d9081908401838280828437600092019190915250505090825250604080516020601f8c018190048102820181019092528a815291810191908b908b9081908401838280828437600092019190915250505090825250602080820189905260408083018990528051601f88018390048302810183019091528681526060909201919087908790819084018382808284376000920182905250939094525050600280546001810182559152825160099091027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace8101918255602084015193945084939192507f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf01906105259082611a77565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201556080820151600482019061056a9082611a77565b5060a0820151600582019061057f9082611a77565b5060c0820151600682015560e0820151600782015561010082015160088201906105a99082611a77565b5050600080548152600160208181526040808420805460ff191690931790925582548551845260039091529082208190559150806105e683611b47565b9091555050805160405190815233907f08997a2eaf1f512d7c641d0bb5433146d04c8b8d4717821d9e9202c1a4cc482f9060200160405180910390a2505050505050505050505050565b600089815260016020526040902054899060ff1661066957604051630faae56760e31b8152600481018290526024015b60405180910390fd5b60008a815260036020526040902054600280548c9291908290811061069057610690611b60565b60009182526020909120600990910201600201546001600160a01b031633146106ce576040516302ce8c4560e61b8152336004820152602401610660565b60008c8152600360205260409020548a15610718578b8b600283815481106106f8576106f8611b60565b90600052602060002090600902016001019182610716929190611b76565b505b88156107535789896002838154811061073357610733611b60565b90600052602060002090600902016004019182610751929190611b76565b505b861561078e5787876002838154811061076e5761076e611b60565b9060005260206000209060090201600501918261078c929190611b76565b505b85156107be5785600282815481106107a8576107a8611b60565b9060005260206000209060090201600601819055505b84156107ee5784600282815481106107d8576107d8611b60565b9060005260206000209060090201600701819055505b336001600160a01b03167fe836ac6d830a993abfa2fab111d6998409f8d4674fa079524c9d089ff50634608e8e8e60405161082b93929190611c31565b60405180910390a250505050505050505050505050565b600081815260016020526040812054829060ff1661087657604051630faae56760e31b815260048101829052602401610660565b60008381526003602052604090205460028054909190811061089a5761089a611b60565b60009182526020909120600260099092020101546001600160a01b031633036108df57604051630438ff8360e11b815233600482015260248101849052604401610660565b600083815260046020908152604080832033845290915290205460ff1615610923576040516348ff52e160e01b815233600482015260248101849052604401610660565b60008381526004602090815260408083203384528252808320805460ff191660011790558583526003909152902054600280547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169263ab57a942928792909190811061099a5761099a611b60565b600091825260209091206009909102016002015460405160e084901b6001600160e01b031916815260048101929092526001600160a01b031660248201523360448201526064016020604051808303816000875af1158015610a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2491906119aa565b91506000604051806080016040528060005481526020016002600360008881526020019081526020016000205481548110610a6157610a61611b60565b60009182526020808320600260099093020191909101546001600160a01b039081168452338483018190526040948501899052600580546001810182559452855160049094027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0810194909455918501517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db1840180549183166001600160a01b0319928316179055858501517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db28501805491909316911617905560608401517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db3909201919091559051919250907f7815683ddea6b35ac11fe96ad50dede79ab35e797c56ce296057a4450b765daf90610b9d9087815260200190565b60405180910390a25050919050565b60606002805480602002602001604051908101604052809291908181526020016000905b82821015610e8a57838290600052602060002090600902016040518061012001604052908160008201548152602001600182018054610c0e906119d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3a906119d9565b8015610c875780601f10610c5c57610100808354040283529160200191610c87565b820191906000526020600020905b815481529060010190602001808311610c6a57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482018054606090920191610cc1906119d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610ced906119d9565b8015610d3a5780601f10610d0f57610100808354040283529160200191610d3a565b820191906000526020600020905b815481529060010190602001808311610d1d57829003601f168201915b50505050508152602001600582018054610d53906119d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7f906119d9565b8015610dcc5780601f10610da157610100808354040283529160200191610dcc565b820191906000526020600020905b815481529060010190602001808311610daf57829003601f168201915b505050505081526020016006820154815260200160078201548152602001600882018054610df9906119d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610e25906119d9565b8015610e725780601f10610e4757610100808354040283529160200191610e72565b820191906000526020600020905b815481529060010190602001808311610e5557829003601f168201915b50505050508152505081526020019060010190610bd0565b50505050905090565b60606005805480602002602001604051908101604052809291908181526020016000905b82821015610e8a5760008481526020908190206040805160808101825260048602909201805483526001808201546001600160a01b0390811685870152600283015416928401929092526003015460608301529083529092019101610eb7565b60028181548110610f2757600080fd5b60009182526020909120600990910201805460018201805491935090610f4c906119d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610f78906119d9565b8015610fc55780601f10610f9a57610100808354040283529160200191610fc5565b820191906000526020600020905b815481529060010190602001808311610fa857829003601f168201915b505050506002830154600384015460048501805494956001600160a01b039093169491935090610ff4906119d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611020906119d9565b801561106d5780601f106110425761010080835404028352916020019161106d565b820191906000526020600020905b81548152906001019060200180831161105057829003601f168201915b505050505090806005018054611082906119d9565b80601f01602080910402602001604051908101604052809291908181526020018280546110ae906119d9565b80156110fb5780601f106110d0576101008083540402835291602001916110fb565b820191906000526020600020905b8154815290600101906020018083116110de57829003601f168201915b50505050509080600601549080600701549080600801805461111c906119d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611148906119d9565b80156111955780601f1061116a57610100808354040283529160200191611195565b820191906000526020600020905b81548152906001019060200180831161117857829003601f168201915b5050505050905089565b600081815260016020526040902054819060ff166111d357604051630faae56760e31b815260048101829052602401610660565b6000828152600360205260409020546002805484929190829081106111fa576111fa611b60565b60009182526020909120600990910201600201546001600160a01b03163314611238576040516302ce8c4560e61b8152336004820152602401610660565b600084815260036020526040902054805b60025461125890600190611c54565b81101561139657600261126c826001611c6d565b8154811061127c5761127c611b60565b90600052602060002090600902016002828154811061129d5761129d611b60565b6000918252602090912082546009909202019081556001808201906112c490840182611c80565b5060028281015490820180546001600160a01b0319166001600160a01b039092169190911790556003808301549082015560048082019061130790840182611c80565b5060058181019061131a90840182611c80565b506006820154816006015560078201548160070155600882018160080190816113439190611c80565b5090505080600360006002848154811061135f5761135f611b60565b906000526020600020906009020160000154815260200190815260200160002081905550808061138e90611b47565b915050611249565b5060028054806113a8576113a8611d4d565b600082815260208120600960001990930192830201818155906113ce6001830182611486565b6002820180546001600160a01b03191690556000600383018190556113f7906004840190611486565b611405600583016000611486565b600682016000905560078201600090556008820160006114259190611486565b505090556000858152600160209081526040808320805460ff191690556003825280832092909255905186815233917ffce186960fd1e9668c92913cf5ec01591ec2cbc4548929392aaa7d128d5a9c97910160405180910390a25050505050565b508054611492906119d9565b6000825580601f106114a2575050565b601f0160209004906000526020600020908101906114c091906114c3565b50565b5b808211156114d857600081556001016114c4565b5090565b6000602082840312156114ee57600080fd5b5035919050565b60008083601f84011261150757600080fd5b50813567ffffffffffffffff81111561151f57600080fd5b60208301915083602082850101111561153757600080fd5b9250929050565b60008060008060008060008060008060c08b8d03121561155d57600080fd5b8a3567ffffffffffffffff8082111561157557600080fd5b6115818e838f016114f5565b909c509a5060208d013591508082111561159a57600080fd5b6115a68e838f016114f5565b909a50985060408d01359150808211156115bf57600080fd5b6115cb8e838f016114f5565b909850965060608d0135955060808d0135945060a08d01359150808211156115f257600080fd5b506115ff8d828e016114f5565b915080935050809150509295989b9194979a5092959850565b6000806040838503121561162b57600080fd5b8235915060208301356001600160a01b038116811461164957600080fd5b809150509250929050565b600080600080600080600080600060c08a8c03121561167257600080fd5b8935985060208a013567ffffffffffffffff8082111561169157600080fd5b61169d8d838e016114f5565b909a50985060408c01359150808211156116b657600080fd5b6116c28d838e016114f5565b909850965060608c01359150808211156116db57600080fd5b506116e88c828d016114f5565b9a9d999c50979a96999598959660808101359660a09091013595509350505050565b6000815180845260005b8181101561173057602081850181015186830182015201611714565b506000602082860101526020601f19601f83011685010191505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561184757603f1989840301855281516101208151855288820151818a8701526117a68287018261170a565b915050878201516117c1898701826001600160a01b03169052565b5060608281015190860152608080830151868303828801526117e3838261170a565b9250505060a080830151868303828801526117fe838261170a565b9250505060c080830151818701525060e08083015181870152506101008083015192508582038187015250611833818361170a565b968901969450505090860190600101611777565b509098975050505050505050565b602080825282518282018190526000919060409081850190868401855b828110156118b857815180518552868101516001600160a01b03908116888701528682015116868601526060908101519085015260809093019290850190600101611872565b5091979650505050505050565b60006101208b83528060208401526118df8184018c61170a565b6001600160a01b038b166040850152606084018a905283810360808501529050611909818961170a565b905082810360a084015261191d818861170a565b90508560c08401528460e084015282810361010084015261193e818561170a565b9c9b505050505050505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b84815260606020820152600061199160608301858761194e565b905060018060a01b038316604083015295945050505050565b6000602082840312156119bc57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806119ed57607f821691505b602082108103611a0d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611a5d57600081815260208120601f850160051c81016020861015611a3a5750805b601f850160051c820191505b81811015611a5957828155600101611a46565b5050505b505050565b600019600383901b1c191660019190911b1790565b815167ffffffffffffffff811115611a9157611a916119c3565b611aa581611a9f84546119d9565b84611a13565b602080601f831160018114611ad45760008415611ac25750858301515b611acc8582611a62565b865550611a59565b600085815260208120601f198616915b82811015611b0357888601518255948401946001909101908401611ae4565b5085821015611b215787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201611b5957611b59611b31565b5060010190565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff831115611b8e57611b8e6119c3565b611ba283611b9c83546119d9565b83611a13565b6000601f841160018114611bd05760008515611bbe5750838201355b611bc88682611a62565b845550611c2a565b600083815260209020601f19861690835b82811015611c015786850135825560209485019460019092019101611be1565b5086821015611c1e5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b838152604060208201526000611c4b60408301848661194e565b95945050505050565b81810381811115611c6757611c67611b31565b92915050565b80820180821115611c6757611c67611b31565b818103611c8b575050565b611c9582546119d9565b67ffffffffffffffff811115611cad57611cad6119c3565b611cbb81611a9f84546119d9565b6000601f821160018114611ce95760008315611cd75750848201545b611ce18482611a62565b855550611c2a565b600085815260209020601f19841690600086815260209020845b83811015611d235782860154825560019586019590910190602001611d03565b5085831015611b215793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fdfea26469706673582212207b0d45157fa230f17f873039147039c753db614d499a5bdf31da01625fd5e07364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 676,
        "contract": "contracts/Listings.sol:Listings",
        "label": "currentId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 680,
        "contract": "contracts/Listings.sol:Listings",
        "label": "existingIds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 684,
        "contract": "contracts/Listings.sol:Listings",
        "label": "listings",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Listing)665_storage)dyn_storage"
      },
      {
        "astId": 688,
        "contract": "contracts/Listings.sol:Listings",
        "label": "idToIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 697,
        "contract": "contracts/Listings.sol:Listings",
        "label": "connectedBuyers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 704,
        "contract": "contracts/Listings.sol:Listings",
        "label": "listingConnections",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(ListingConnection)674_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Listing)665_storage)dyn_storage": {
        "base": "t_struct(Listing)665_storage",
        "encoding": "dynamic_array",
        "label": "struct Listings.Listing[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ListingConnection)674_storage)dyn_storage": {
        "base": "t_struct(ListingConnection)674_storage",
        "encoding": "dynamic_array",
        "label": "struct Listings.ListingConnection[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Listing)665_storage": {
        "encoding": "inplace",
        "label": "struct Listings.Listing",
        "members": [
          {
            "astId": 648,
            "contract": "contracts/Listings.sol:Listings",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 650,
            "contract": "contracts/Listings.sol:Listings",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 652,
            "contract": "contracts/Listings.sol:Listings",
            "label": "seller",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 654,
            "contract": "contracts/Listings.sol:Listings",
            "label": "attestationUID",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 656,
            "contract": "contracts/Listings.sol:Listings",
            "label": "location",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 658,
            "contract": "contracts/Listings.sol:Listings",
            "label": "description",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 660,
            "contract": "contracts/Listings.sol:Listings",
            "label": "price",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 662,
            "contract": "contracts/Listings.sol:Listings",
            "label": "beds",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 664,
            "contract": "contracts/Listings.sol:Listings",
            "label": "cid",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(ListingConnection)674_storage": {
        "encoding": "inplace",
        "label": "struct Listings.ListingConnection",
        "members": [
          {
            "astId": 667,
            "contract": "contracts/Listings.sol:Listings",
            "label": "listingId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 669,
            "contract": "contracts/Listings.sol:Listings",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 671,
            "contract": "contracts/Listings.sol:Listings",
            "label": "buyer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 673,
            "contract": "contracts/Listings.sol:Listings",
            "label": "attestationUID",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}